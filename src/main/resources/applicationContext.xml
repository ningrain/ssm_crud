<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.gta">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <context:property-placeholder location="classpath*:*.properties"/>

    <!--数据源1-->
    <bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc1.url}"/>
        <property name="driverClass" value="${jdbc1.driverClassName}"/>
        <property name="user" value="${jdbc1.user}"/>
        <property name="password" value="${jdbc1.password}"/>
    </bean>

    <!--数据源2-->
    <bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc2.url}"/>
        <property name="driverClass" value="${jdbc2.driverClassName}"/>
        <property name="user" value="${jdbc2.user}"/>
        <property name="password" value="${jdbc2.password}"/>
    </bean>

    <!--配置多数据源映射-->
    <bean id="dynamicDataSource" class="com.gta.util.DynamicDataSource">
        <!--默认数据源-->
        <property name="defaultTargetDataSource" ref="dataSource1"/>
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource1" value-ref="dataSource1"/>
                <entry key="dataSource2" value-ref="dataSource2"/>
            </map>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="mapperLocations" value="classpath*:com/gta/mapper/*.xml"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <constructor-arg index="1" value="BATCH" />
    </bean>

    <!-- 配置扫描DAO接口， 动态实现DAO接口， 注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gta.dao"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>

    <!--<bean id="logAspect" class="com.gta.aspect.LogAspect"/>

    <aop:config>
        <aop:aspect ref="logAspect">
            <aop:pointcut id="pointcut" expression="execution(* com.gta.service..*.*(..))"/>
            <aop:before method="doBefore" pointcut-ref="pointcut"/>
            <aop:after method="doAfter" pointcut-ref="pointcut"/>
            <aop:after-returning method="doAfterReturning" pointcut-ref="pointcut" returning="object"/>
            <aop:after-throwing method="doAfterThrowing" pointcut-ref="pointcut" throwing="e"/>
            &lt;!&ndash;<aop:around method="doAround" pointcut-ref="pointcut"/>&ndash;&gt;
        </aop:aspect>
    </aop:config>

    <tx:advice id="interceptor"> &lt;!&ndash;默认（transaction-manager="transactionManager"） 可以省略&ndash;&gt;
        <tx:attributes>
            <tx:method name="get*" propagation="NEVER"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>-->

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--基于注解的事务管理 默认（transaction-manager="transactionManager"） 可以省略-->
    <tx:annotation-driven order="4"/>

    <task:annotation-driven scheduler="qbScheduler"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>